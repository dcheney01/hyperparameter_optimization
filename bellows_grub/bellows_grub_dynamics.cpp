/*------------------------- MANUAL CHANGES ------------------------------
	need to add 'namespace py = pybind11;' after #include statements
	need to update return type in both the function name and function body. This will likely be py::array. Ensure this matches the header file.
	make sure input vars for each function are correct type (e.g. std::vector). These should also match the header file prototypes.
	make sure code doesn't contain invalid c syntax that slipped through
*/

#include "bellows_grub_dynamics.h"
#include <math.h>

namespace py = pybind11;

Eigen::MatrixXd calc_state_derivs(const Eigen::MatrixXd &X, const Eigen::MatrixXd &U, double m, double stiffness, double damping, double alpha)
{
    int numStates = X.rows();
    int batchSize = X.cols();
    int numInputs = U.rows();

    // py::print("numStates",numStates);
    // py::print("batchSize",batchSize);
    // py::print("numinputs",numInputs);
    
    Eigen::MatrixXd xDot = Eigen::ArrayXXd::Zero(numStates, batchSize);

    for (int batchNum = 0; batchNum < batchSize; batchNum++)
    {
      // py::print("Batch",batchNum);

      //extract out individual simulations in batch
        Eigen::VectorXd x = X.block(0,batchNum,numStates,1);
        Eigen::VectorXd u = U.block(0,batchNum,numInputs,1);

	// py::print(x);
	// py::print(u);
	
        double h{0.21};
        double r{0.16};
	
        Eigen::VectorXd pressures = x.segment(0, 4);
        Eigen::VectorXd qDot = x.segment(4, 2);
        std::vector<double> qDotStd(qDot.data(), qDot.data() + qDot.size());
        Eigen::VectorXd q = x.segment(6, 2);
        std::vector<double> qStd(q.data(), q.data() + q.size());

	// calculate mass matrix for individual sim
        std::vector<double> mStd = calc_M(qStd, h, m, r);
	// convert std vector to eigen matrix
        Eigen::MatrixX2d massMatrix(2, 2);
        massMatrix << mStd[0], mStd[1],
            mStd[2], mStd[3];

	//check for near singular mass matrix
	Eigen::JacobiSVD<Eigen::MatrixXd> svd(massMatrix);
	double cond = svd.singularValues()(0) /
	  svd.singularValues()(svd.singularValues().size()-1);

	if (cond > 10000){
	  py::print("Mass Matrix is nearly singular for sim ",  batchNum);
	  py::print("q\n",q);
	}
	
        Eigen::MatrixX2d massMatrixInverse(massMatrix.inverse());
	// py::print("MassMatrix\n", massMatrixInverse);

	//calculate coriolis matrix
        std::vector<double> cStd = calc_C(qStd, qDotStd, h, m, r);
        Eigen::MatrixX2d coriolisMatrix(2, 2);
        coriolisMatrix << cStd[0], cStd[1],
            cStd[2], cStd[3];

        Eigen::MatrixXd alphas(4, 4);
        alphas << alpha, 0.0, 0.0, 0.0,
            0.0, alpha, 0.0, 0.0,
            0.0, 0.0, alpha, 0.0,
            0.0, 0.0, 0.0, alpha;
        Eigen::MatrixXd kDamper(2, 2);
        kDamper << damping, 0.0,
            0.0, damping;
        Eigen::MatrixXd kSpring(2, 2);
        kSpring << stiffness, 0.0,
            0.0, stiffness;
        Eigen::MatrixXd pressureTorqueConversion(2, 4);
        pressureTorqueConversion << 0.15, -0.15, 0.0, 0.0,
            0.0, 0.0, 0.15, -0.15;

	//put everything in state variable form
        Eigen::MatrixXd A11 = -alphas;
        Eigen::MatrixXd A12 = Eigen::ArrayXXd::Zero(4, 2);
        Eigen::MatrixXd A13 = Eigen::ArrayXXd::Zero(4, 2);
        Eigen::MatrixXd A21 = massMatrixInverse * pressureTorqueConversion;
        Eigen::MatrixXd A22 = massMatrixInverse * (coriolisMatrix - kDamper);
        Eigen::MatrixXd A23 = massMatrixInverse * -kSpring;
        Eigen::MatrixXd A31 = Eigen::ArrayXXd::Zero(2, 4);
        Eigen::MatrixXd A32(2, 2);
        A32 << 1.0, 0.0,
            0.0, 1.0;
        Eigen::MatrixXd A33 = Eigen::ArrayXXd::Zero(2, 2);

        Eigen::MatrixXd aMatrix(8, 8);
        aMatrix << A11, A12, A13,
            A21, A22, A23,
            A31, A32, A33;

        Eigen::MatrixXd B11 = alphas;
        Eigen::MatrixXd B21 = Eigen::ArrayXXd::Zero(2, 4);
        Eigen::MatrixXd B31 = Eigen::ArrayXXd::Zero(2, 4);
        Eigen::MatrixXd bMatrix(8, 4);
        bMatrix << B11,
            B21,
            B31;

	//calculate gravity vector
        double g = 9.81;
        std::vector<double> gravityStd = calc_grav(qStd, h, m, g);
        Eigen::MatrixXd gravityTorque(2, 1);
        gravityTorque << gravityStd[0], gravityStd[1];
        Eigen::MatrixXd wMatrix(8, 1);
        wMatrix << 0.0, 0.0, 0.0, 0.0, gravityTorque, 0.0, 0.0;

	//calc 
        Eigen::Vector4d controlInput = u;
        Eigen::VectorXd stateDot = aMatrix * x + bMatrix * controlInput + wMatrix;
        xDot.block(0, batchNum, numStates, 1) = stateDot;
    }

    return xDot;
}

std::vector<double> calc_M(std::vector<double> state, double h, double m, double r)
{
  
    std::vector<double> M_output{0.0, 0.0, 0.0, 0.0};
    double x0[2];
    x0[0] = state[0];
    x0[1] = state[1];

    //make sure q=state is not zero
    if (abs(x0[0]) < .001){
      if (x0[0] >= 0){
	x0[0] = .001;
      }else{
	x0[0] = -.001;
      }
    }else if(abs(x0[1]) < .001){
      if (x0[1] >= 0){
	x0[1] = .001;
      }else{
	x0[1] = -.001;
      }
    }
    
    const double x1 = x0[0];
    const double x2 = pow(x1, 4);
    const double x3 = pow(h, 3);
    const double x4 = x2 * x3;
    const double x5 = pow(x1, 6);
    const double x6 = h * x5;
    const double x7 = x0[1];
    const double x8 = pow(x7, 6);
    const double x9 = h * x8;
    const double x10 = pow(x1, 2);
    const double x11 = pow(x7, 4);
    const double x12 = h * x11;
    const double x13 = x10 * x12;
    const double x14 = pow(x7, 2);
    const double x15 = h * x2;
    const double x16 = x14 * x15;
    const double x17 = m / (9 * x13 + 9 * x16 + 3 * x6 + 3 * x9);
    const double x18 = 12 * x3;
    const double x19 = x18 * x5;
    const double x20 = x18 * x8;
    const double x21 = x10 * x11;
    const double x22 = 36 * x3;
    const double x23 = 36 * x4;
    const double x24 = 1.0 / (x14 * x23 + x19 + x20 + x21 * x22);
    const double x25 = m * pow(r, 2);
    const double x26 = x25 * x3;
    const double x27 = x24 * x26;
    const double x28 = x14 * x25;
    const double x29 = x10 * x14;
    const double x30 = 2 * x29;
    const double x31 = h / (h * x30 + x12 + x15);
    const double x32 = 0.5 * x31;
    const double x33 = x28 * x32;
    const double x34 = sqrt(x10 + x14);
    const double x35 = x10 * x34;
    const double x36 = 2 * x35;
    const double x37 = m / (3 * x13 + 3 * x16 + x6 + x9);
    const double x38 = cos(x34);
    const double x39 = pow(h, 2);
    const double x40 = x14 * x34;
    const double x41 = x39 / (x35 + x40);
    const double x42 = x38 * x41;
    const double x43 = sin(x34);
    const double x44 = -x10 * x42 - x14 * x42 + x34 * x41 * x43;
    const double x45 = h * x44;
    const double x46 = x37 * x45;
    const double x47 = x28 * x4;
    const double x48 = x24 * x47;
    const double x49 = 1.0 / x34;
    const double x50 = (1.0 / 2.0) * x34;
    const double x51 = (1.0 / 2.0) * x38 * x43;
    const double x52 = x50 - x51;
    const double x53 = x49 * x52;
    const double x54 = x3 * x37 * x53;
    const double x55 = 4 * x3;
    const double x56 = x5 * x55;
    const double x57 = x55 * x8;
    const double x58 = x18 * x2;
    const double x59 = 1.0 / (x14 * x58 + x18 * x21 + x56 + x57);
    const double x60 = x26 * x53;
    const double x61 = x59 * x60;
    const double x62 = x50 + x51;
    const double x63 = x49 * x62;
    const double x64 = 1.0 * x31 * x43 * x49;
    const double x65 = m * x39 / (x11 + x2 + x30);
    const double x66 = x49 * x65;
    const double x67 = x29 * x61 - 2 * x43 * x66 + x62 * x66;
    const double x68 = x34 / h != 0;
    const double x69 = -x65;
    const double x70 = x17 * x3;
    const double x71 = x21 * x27 + x29 * x70 + x65;
    const double x72 = x25 * x32;
    const double x73 = x1 * x7;
    const double x74 = x72 * x73;
    const double x75 = pow(x7, 3);
    const double x76 = x1 * x75;
    const double x77 = pow(x1, 3);
    const double x78 = x7 * x77;
    const double x79 = pow(x1, 5) * x7;
    const double x80 = x75 * x77;
    const double x81 = x11 * x35;
    const double x82 = x26 * x34 / (x19 * x34 + x20 * x34 + x22 * x81 + x23 * x40);
    const double x83 = x1 * pow(x7, 5);
    const double x84 = 2 * x46;
    const double x85 = x25 * x45;
    const double x86 = x34 * x59 * x85;
    const double x87 = 1.0 / (x18 * x81 + x34 * x56 + x34 * x57 + x40 * x58);
    const double x88 = x85 * x87;
    const double x89 = x25 * x64;
    const double x90 = x27 * x79 + x27 * x80 - x34 * x73 * x84 + x70 * x76 + x70 * x78 - x74 + x76 * x86 - x78 * x86 + x79 * x88 + x80 * x82 + x82 * x83 - x83 * x88 + ((x68) ? (-x26 * x52 * x78 * x87 + x54 * x73 - x61 * x76 - x63 * x74 + x73 * x89) : (x74));
    const double x91 = pow(x7, 8);
    const double x92 = pow(x1, 8);
    const double x93 = 48 * x3;
    const double x94 = x10 * x8;
    const double x95 = x11 * x4;
    const double x96 = x14 * x5;
    const double x97 = 1.0 / (x18 * x91 + x18 * x92 + x93 * x94 + x93 * x96 + 72 * x95);
    const double x98 = x26 * x97;
    const double x99 = x10 * x72;
    const double x100 = 16 * x3;
    const double x101 = 1.0 / (x100 * x94 + x100 * x96 + x55 * x91 + x55 * x92 + 24 * x95);
    const double x102 = x101 * x25 * x44;

    M_output[0] = x17 * x4 + x27 * x5 + x33 - x36 * x46 + 2 * x48 + x71 + ((x68) ? (x10 * x54 + x11 * x61 - x28 * x64 + x33 * x63 + x67) : (-x33 + x69));
    M_output[1] = x90;
    M_output[2] = x90;
    M_output[3] = x102 * x12 * x36 + 2 * x102 * x15 * x40 + x11 * x70 + x25 * x95 * x97 - x28 * x36 * x45 * x59 - x40 * x84 + x48 + x71 + x91 * x98 + 2 * x94 * x98 + x99 + ((x68) ? (-x10 * x89 + x101 * x47 * x53 + x101 * x5 * x60 + x14 * x54 + x63 * x99 + x67) : (x69 - x99));

    return M_output;
}

std::vector<double> calc_C(std::vector<double> state, std::vector<double> stateDot, double h, double m, double r)
{
    std::vector<double> C_output{0.0, 0.0, 0.0, 0.0};
    double x0[2];
    x0[0] = stateDot[0];
    x0[1] = stateDot[1];
    const double x1 = x0[1];
    double x2[2];
    x2[0] = state[0];
    x2[1] = state[1];
    const double x3 = x2[1];
    const double x4 = x2[0];
    const double x5 = pow(x4, 4);
    const double x6 = h * x5;
    const double x7 = pow(x3, 4);
    const double x8 = h * x7;
    const double x9 = pow(x4, 2);
    const double x10 = pow(x3, 2);
    const double x11 = x10 * x9;
    const double x12 = 2 * x11;
    const double x13 = h * x12 + x6 + x8;
    const double x14 = h * m;
    const double x15 = x14 / x13;
    const double x16 = pow(r, 2);
    const double x17 = 0.5 * x16;
    const double x18 = x15 * x17;
    const double x19 = x18 * x3;
    const double x20 = x3 * x9;
    const double x21 = pow(x4, 6);
    const double x22 = pow(x3, 6);
    const double x23 = h * x21 + h * x22 + 3 * x10 * x6 + 3 * x8 * x9;
    const double x24 = 1.0 / x23;
    const double x25 = pow(h, 3);
    const double x26 = m * x25;
    const double x27 = x24 * x26;
    const double x28 = x10 + x9;
    const double x29 = pow(x28, -3.0 / 2.0);
    const double x30 = sqrt(x28);
    const double x31 = (1.0 / 2.0) * x30;
    const double x32 = sin(x30);
    const double x33 = cos(x30);
    const double x34 = (1.0 / 2.0) * x32 * x33;
    const double x35 = x31 - x34;
    const double x36 = x29 * x35;
    const double x37 = x27 * x36;
    const double x38 = -x20 * x37;
    const double x39 = 1.0 / x30;
    const double x40 = x3 * x39;
    const double x41 = (1.0 / 2.0) * x40;
    const double x42 = pow(x32, 2);
    const double x43 = x41 * x42;
    const double x44 = pow(x33, 2);
    const double x45 = x41 * x44;
    const double x46 = x41 + x43 - x45;
    const double x47 = x27 * x39;
    const double x48 = x47 * x9;
    const double x49 = x39 * x46;
    const double x50 = 4 * x25;
    const double x51 = x21 * x50;
    const double x52 = x22 * x50;
    const double x53 = 12 * x25;
    const double x54 = x53 * x7;
    const double x55 = x5 * x53;
    const double x56 = x10 * x55 + x51 + x52 + x54 * x9;
    const double x57 = 1.0 / x56;
    const double x58 = x26 * x57;
    const double x59 = x16 * x58;
    const double x60 = x59 * x7;
    const double x61 = pow(x23, -2);
    const double x62 = pow(x3, 5);
    const double x63 = 6 * h;
    const double x64 = x3 * x6;
    const double x65 = pow(x3, 3);
    const double x66 = x65 * x9;
    const double x67 = 12 * h;
    const double x68 = x61 * (-x62 * x63 - 6 * x64 - x66 * x67);
    const double x69 = x26 * x68;
    const double x70 = x35 * x39;
    const double x71 = x70 * x9;
    const double x72 = x36 * x59;
    const double x73 = 4 * x65;
    const double x74 = x41 - x43 + x45;
    const double x75 = x39 * x74;
    const double x76 = x10 * x18;
    const double x77 = x29 * x65;
    const double x78 = 1.0 * x16;
    const double x79 = x15 * x78;
    const double x80 = x32 * x79;
    const double x81 = x31 + x34;
    const double x82 = x79 * x81;
    const double x83 = x18 * x81;
    const double x84 = 1.0 / x28;
    const double x85 = x33 * x79 * x84;
    const double x86 = 2.0 * x16;
    const double x87 = x15 * x32 * x86;
    const double x88 = pow(x56, -2);
    const double x89 = 24 * x25;
    const double x90 = x62 * x89;
    const double x91 = x5 * x89;
    const double x92 = x3 * x91;
    const double x93 = 48 * x25;
    const double x94 = x88 * (-x66 * x93 - x90 - x92);
    const double x95 = x7 * x94;
    const double x96 = x16 * x26;
    const double x97 = x70 * x96;
    const double x98 = x39 * x81;
    const double x99 = 4 * x20;
    const double x100 = -h * x73 - h * x99;
    const double x101 = x14 / pow(x13, 2);
    const double x102 = x10 * x101;
    const double x103 = x100 * x102;
    const double x104 = x103 * x17;
    const double x105 = x39 * x78;
    const double x106 = x105 * x32;
    const double x107 = x12 + x5 + x7;
    const double x108 = pow(h, 2);
    const double x109 = m * x108;
    const double x110 = x109 / x107;
    const double x111 = x109 / pow(x107, 2);
    const double x112 = x111 * (-x73 - x99);
    const double x113 = x110 * x29;
    const double x114 = x113 * x81;
    const double x115 = x3 * x33;
    const double x116 = 2 * x110 * x84;
    const double x117 = 2 * x32;
    const double x118 = x117 * x39;
    const double x119 = x113 * x117;
    const double x120 = x11 * x59;
    const double x121 = x66 * x72;
    const double x122 = x40 * x9;
    const double x123 = 2 * x35;
    const double x124 = x123 * x59;
    const double x125 = x11 * x97;
    const double x126 = x110 * x75 - x112 * x118 + x112 * x98 - x114 * x3 - x115 * x116 + x119 * x3 + x120 * x49 - x121 + x122 * x124 + x125 * x94;
    const double x127 = x30 / h != 0;
    const double x128 = x3 * x78;
    const double x129 = -x128 * x15;
    const double x130 = -x112;
    const double x131 = 0.5 * ((x127) ? (
                                            -x103 * x106 + x104 * x98 + x126 + x38 + x40 * x82 - x40 * x87 + x46 * x48 + x49 * x60 + x59 * x70 * x73 - x62 * x72 - x65 * x85 + x69 * x71 + x75 * x76 + x77 * x80 - x77 * x83 + x95 * x97)
                                      : (
                                            -x104 + x129 + x130));
    const double x132 = x26 * x5;
    const double x133 = 0.16666666666666699 * x132;
    const double x134 = x133 * x68;
    const double x135 = 0.25 * x16;
    const double x136 = x103 * x135;
    const double x137 = x132 * x57;
    const double x138 = x16 * x3;
    const double x139 = x137 * x138;
    const double x140 = 0.16666666666666699 * x96;
    const double x141 = x140 * x21;
    const double x142 = x141 * x94;
    const double x143 = x30 * x9;
    const double x144 = x10 * x30;
    const double x145 = x143 + x144;
    const double x146 = x108 / x145;
    const double x147 = x146 * x32;
    const double x148 = x39 * x65;
    const double x149 = 2 * x30;
    const double x150 = x108 / pow(x145, 2);
    const double x151 = x150 * (-x122 - x148 - x149 * x3);
    const double x152 = x151 * x33;
    const double x153 = x30 * x32;
    const double x154 = -x10 * x152 - x115 * x146 + x122 * x147 + x147 * x148 + x147 * x40 + x151 * x153 - x152 * x9;
    const double x155 = x143 * x154;
    const double x156 = x14 * x24;
    const double x157 = 1.0 * x156;
    const double x158 = x155 * x157;
    const double x159 = 0.33333333333333298 * x94;
    const double x160 = x10 * x16;
    const double x161 = x132 * x160;
    const double x162 = x159 * x161;
    const double x163 = x146 * x33;
    const double x164 = -x10 * x163 + x146 * x153 - x163 * x9;
    const double x165 = x14 * x164;
    const double x166 = 1.0 * x165;
    const double x167 = x143 * x166;
    const double x168 = x167 * x68;
    const double x169 = x157 * x164;
    const double x170 = -x122 * x169;
    const double x171 = 0.5 * x112;
    const double x172 = 0.33333333333333298 * x27;
    const double x173 = 0.66666666666666696 * x59;
    const double x174 = 0.16666666666666699 * x26;
    const double x175 = x11 * x174;
    const double x176 = x175 * x68;
    const double x177 = x140 * x9;
    const double x178 = x177 * x95;
    const double x179 = x171 + x172 * x20 + x173 * x66 + x176 + x178;
    const double x180 = x131 + x134 + x136 + 0.66666666666666696 * x139 + x142 - x158 + x162 - x168 + x170 + x179 + x19;
    const double x181 = x0[0];
    const double x182 = x39 * x4;
    const double x183 = (1.0 / 2.0) * x182;
    const double x184 = x183 * x42;
    const double x185 = x183 * x44;
    const double x186 = x183 + x184 - x185;
    const double x187 = pow(x4, 3);
    const double x188 = x187 * x27;
    const double x189 = x27 * x35;
    const double x190 = x182 * x189;
    const double x191 = x186 * x39;
    const double x192 = pow(x4, 5);
    const double x193 = x4 * x8;
    const double x194 = x10 * x187;
    const double x195 = x61 * (-x192 * x63 - 6 * x193 - x194 * x67);
    const double x196 = x195 * x26;
    const double x197 = x183 - x184 + x185;
    const double x198 = x197 * x39;
    const double x199 = x192 * x89;
    const double x200 = x4 * x7;
    const double x201 = x200 * x89;
    const double x202 = x88 * (-x194 * x93 - x199 - x201);
    const double x203 = x202 * x7;
    const double x204 = x200 * x72;
    const double x205 = 4 * x187;
    const double x206 = x10 * x4;
    const double x207 = 4 * x206;
    const double x208 = -h * x205 - h * x207;
    const double x209 = x102 * x208;
    const double x210 = x17 * x209;
    const double x211 = x206 * x29;
    const double x212 = x211 * x80;
    const double x213 = x211 * x83;
    const double x214 = x206 * x85;
    const double x215 = x111 * (-x205 - x207);
    const double x216 = x10 * x182;
    const double x217 = x110 * x198 - x114 * x4 - x116 * x33 * x4 - x118 * x215 + x119 * x4 + x120 * x191 + x124 * x216 + x125 * x202 - x194 * x72 + x215 * x98;
    const double x218 = -x215;
    const double x219 = x192 * x78;
    const double x220 = x194 * x59;
    const double x221 = x187 * x39;
    const double x222 = x150 * (-x149 * x4 - x216 - x221);
    const double x223 = x222 * x33;
    const double x224 = -x10 * x223 + x147 * x182 + x147 * x216 + x147 * x221 + x153 * x222 - x163 * x4 - x223 * x9;
    const double x225 = x157 * x224;
    const double x226 = x164 * x30;
    const double x227 = 2.0 * x226;
    const double x228 = x156 * x227;
    const double x229 = -x228 * x4;
    const double x230 = 0.33333333333333298 * x202;
    const double x231 = 0.5 * x215;
    const double x232 = 0.33333333333333298 * x59;
    const double x233 = x200 * x232;
    const double x234 = x175 * x195;
    const double x235 = x177 * x203;
    const double x236 = x172 * x206 + x231 + x233 + x234 + x235;
    const double x237 = -x4 * x79;
    const double x238 = 0.66666666666666696 * x27;
    const double x239 = x101 * x9;
    const double x240 = x208 * x239;
    const double x241 = x135 * x240;
    const double x242 = 0.33333333333333298 * x192;
    const double x243 = x3 * x4;
    const double x244 = x100 * x101;
    const double x245 = x17 * x244;
    const double x246 = x243 * x245;
    const double x247 = x22 * x4;
    const double x248 = pow(x3, 8);
    const double x249 = 16 * x25;
    const double x250 = x22 * x9;
    const double x251 = x10 * x21 * x249 + x248 * x50 + x249 * x250 + pow(x4, 8) * x50 + x7 * x91;
    const double x252 = 1.0 / x251;
    const double x253 = x252 * x96;
    const double x254 = 0.66666666666666696 * x253;
    const double x255 = x247 * x254;
    const double x256 = x187 * x7;
    const double x257 = x254 * x256;
    const double x258 = x174 * x7;
    const double x259 = x195 * x258;
    const double x260 = 0.33333333333333298 * x69;
    const double x261 = x4 * x65;
    const double x262 = x187 * x3;
    const double x263 = x242 * x3 * x96;
    const double x264 = x133 * x160;
    const double x265 = x202 * x264;
    const double x266 = x187 * x65 * x96;
    const double x267 = pow(x251, -2);
    const double x268 = pow(x4, 7);
    const double x269 = 32 * x25;
    const double x270 = 96 * x25;
    const double x271 = x10 * x192;
    const double x272 = x267 * (-x247 * x269 - x256 * x270 - x268 * x269 - x270 * x271);
    const double x273 = x140 * x248;
    const double x274 = x272 * x273;
    const double x275 = x143 * x54 + x144 * x55 + x30 * x51 + x30 * x52;
    const double x276 = 1.0 / x275;
    const double x277 = x276 * x96;
    const double x278 = 0.33333333333333298 * x277;
    const double x279 = x277 * x30;
    const double x280 = x144 * x187;
    const double x281 = x26 * x276 * x78;
    const double x282 = 0.33333333333333298 * x250 * x96;
    const double x283 = x272 * x282;
    const double x284 = x16 * x272;
    const double x285 = x133 * x7;
    const double x286 = x284 * x285;
    const double x287 = -x169 * x216;
    const double x288 = x57 * x78;
    const double x289 = x14 * x288;
    const double x290 = x187 * x226;
    const double x291 = m * x164;
    const double x292 = x291 * x8;
    const double x293 = x16 * x165;
    const double x294 = x144 * x4 * x57;
    const double x295 = x16 * x252;
    const double x296 = m * x227 * x295;
    const double x297 = x193 * x296;
    const double x298 = x252 * x78;
    const double x299 = x221 * x292 * x298;
    const double x300 = x105 * x165 * x252 * x271;
    const double x301 = 4.0 * x252 * x293;
    const double x302 = x280 * x301;
    const double x303 = x144 * x166;
    const double x304 = x195 * x303;
    const double x305 = x14 * x227 * x243;
    const double x306 = x165 * x276;
    const double x307 = pow(x275, -2);
    const double x308 = pow(x3, 7);
    const double x309 = x39 * x50;
    const double x310 = x62 * x9;
    const double x311 = x39 * x53;
    const double x312 = x143 * x65;
    const double x313 = x307 * (-x148 * x55 - x30 * x90 - x30 * x92 - x308 * x309 - x310 * x311 - x312 * x93 - x40 * x51);
    const double x314 = x30 * x313;
    const double x315 = 0.33333333333333298 * x62;
    const double x316 = x315 * x4 * x96;
    const double x317 = x78 * x94;
    const double x318 = x14 * x226 * x261;
    const double x319 = x128 * x14;
    const double x320 = x290 * x319;
    const double x321 = 0.33333333333333298 * x266;
    const double x322 = x202 * x78;
    const double x323 = x143 * x165;
    const double x324 = x10 * x323;
    const double x325 = x322 * x324;
    const double x326 = x16 * x276;
    const double x327 = 5.0 * x291 * x326;
    const double x328 = x272 * x78;
    const double x329 = x143 * x292;
    const double x330 = x328 * x329;
    const double x331 = x291 * x6;
    const double x332 = x144 * x331;
    const double x333 = x328 * x332;
    const double x334 = x62 * x78;
    const double x335 = x334 * x4;
    const double x336 = x165 * x313;
    const double x337 = x128 * x192;
    const double x338 = x144 * x225;
    const double x339 = x154 * x30;
    const double x340 = 2.0 * x156 * x243;
    const double x341 = x261 * x289;
    const double x342 = x187 * x319 * x57;
    const double x343 = x143 * x224;
    const double x344 = x10 * x289;
    const double x345 = x343 * x344;
    const double x346 = m * x298;
    const double x347 = x346 * x8;
    const double x348 = x343 * x347;
    const double x349 = x346 * x6;
    const double x350 = x144 * x224 * x349;
    const double x351 = x14 * x276;
    const double x352 = x154 * x351;
    const double x353 = x4 * x40;
    const double x354 = x32 * x353 * x78;
    const double x355 = -x206 * x37;
    const double x356 = x353 * x81;
    const double x357 = 3 * x35;
    const double x358 = x18 * x4;
    const double x359 = x358 * x40;
    const double x360 = x35 * x353;
    const double x361 = x27 * x353;
    const double x362 = x187 * x277;
    const double x363 = x35 * x96;
    const double x364 = x148 * x363 * x4;
    const double x365 = x148 * x59;
    const double x366 = x365 * x4;
    const double x367 = x3 * x362;
    const double x368 = x262 * x363;
    const double x369 = x10 * x47;
    const double x370 = x21 * x253;
    const double x371 = x10 * x70;
    const double x372 = x253 * x36;
    const double x373 = x18 * x9;
    const double x374 = x187 * x29;
    const double x375 = x161 * x252;
    const double x376 = x21 * x97;
    const double x377 = x17 * x240;
    const double x378 = x132 * x371;
    const double x379 = 0.5 * ((x127) ? (
                                            -x106 * x240 + x182 * x82 - x182 * x87 + x186 * x369 - x187 * x85 + x191 * x370 + x191 * x375 + 6 * x192 * x253 * x70 + x196 * x371 + x198 * x373 + x205 * x253 * x371 + x217 - x268 * x372 - x271 * x372 + x272 * x376 + x284 * x378 + x355 + x374 * x80 - x374 * x83 + x377 * x98)
                                      : (x218 + x237 - x377));
    const double x380 = x165 * x288;
    const double x381 = -x10 * x221 * x380 - x165 * x294 * x86 + x173 * x194 + x236 + x241 + x255 + x257 + x259 + x265 + x274 + x283 + x286 + x287 + x297 + x299 + x300 + x302 - x304 - x325 + x330 + x333 - x338 - x345 + x348 + x350 + x358 + x379;
    const double x382 = x27 * x65;
    const double x383 = x101 * x208;
    const double x384 = x17 * x383;
    const double x385 = x243 * x384;
    const double x386 = 0.33333333333333298 * x196;
    const double x387 = x310 * x39;
    const double x388 = -x228 * x3;
    const double x389 = x138 * x323 * x57;
    const double x390 = x148 * x380 * x9;
    const double x391 = x307 * (-x182 * x52 - x199 * x30 - x201 * x30 - x221 * x54 - x268 * x309 - x271 * x311 - x280 * x93);
    const double x392 = x30 * x391;
    const double x393 = x165 * x391;
    const double x394 = x224 * x30;
    const double x395 = x224 * x351;
    const double x396 = x20 * x29;
    const double x397 = x396 * x80;
    const double x398 = x20 * x85;
    const double x399 = x396 * x83;
    const double x400 = x189 * x40;
    const double x401 = x21 * x3;
    const double x402 = x5 * x65;
    const double x403 = x267 * (-x269 * x308 - x269 * x401 - x270 * x310 - x270 * x402);
    const double x404 = x100 * x239;
    const double x405 = x17 * x404;
    const double x406 = x16 * x403;
    const double x407 = x144 * x154;
    const double x408 = x403 * x78;

    C_output[0] = x1 * x180 + x181 * (x133 * x195 + x135 * x209 + x141 * x202 - x143 * x225 + x161 * x230 - x167 * x195 - x169 * x221 + 0.66666666666666696 * x188 + x219 * x58 + 1.3333333333333299 * x220 + x229 + x236 + 0.5 * ((x127) ? (-x106 * x209 + x186 * x48 - x188 * x36 + 2 * x190 + x191 * x60 + x196 * x71 + x198 * x76 + x203 * x97 - x204 + x210 * x98 + x212 - x213 - x214 + x217) : (-x210 + x218)));
    C_output[1] = x1 * (x159 * x266 + x182 * x22 * x278 + x182 * x288 * x292 + 0.33333333333333298 * x188 - x193 * x327 + 1.6666666666666701 * x200 * x279 + x206 * x238 + x219 * x306 + 0.33333333333333298 * x220 + x221 * x278 * x7 + x229 - x231 - x233 - x234 - x235 + x237 - x241 + x242 * x59 - x246 - x255 - x257 - x259 + x260 * x261 + x260 * x262 + x263 * x94 - x265 - x274 + x280 * x281 - x283 - x286 + x287 - x289 * x290 + 5.0 * x293 * x294 - x297 - x299 - x300 - x302 + x304 - x305 * x68 + x314 * x316 + x314 * x321 + x317 * x318 - x320 * x94 + x325 - x330 - x333 - x335 * x336 - x335 * x352 + x336 * x337 + x337 * x352 + x338 - x339 * x340 + x339 * x341 - x339 * x342 + x345 - x348 - x350 - x379 + 1.0 * ((x127) ? (x182 * x80 - x182 * x83 + x190 + x204 - x212 + x213 + x214 - x216 * x357 * x59 + x244 * x354 - x245 * x356 - x313 * x368 - x35 * x362 + x355 - x359 * x74 + x360 * x69 + x361 * x46 - x364 * x94 - x366 * x46 - x367 * x46) : (x246 + x358))) + x180 * x181;
    C_output[2] = x1 * x381 + x181 * (x128 * x137 + x129 - x131 + 0.33333333333333298 * x132 * x148 * x326 - x134 - x136 - x142 + x158 - x162 + x168 + x170 - x171 - x176 - x178 - x195 * x305 + x20 * x238 + x202 * x263 - x202 * x320 + x226 * x289 * x65 + x230 * x266 + x232 * x66 + x261 * x386 + x262 * x386 + x278 * x387 + x279 * x315 + x281 * x312 - x288 * x331 * x40 - x306 * x334 + x316 * x392 + x318 * x322 + x321 * x392 + x327 * x64 - x335 * x393 - x335 * x395 + x337 * x393 + x337 * x395 - x340 * x394 + x341 * x394 - x342 * x394 + 0.33333333333333298 * x382 - x385 + x388 - 3.0 * x389 + x390 + 1.0 * ((x127) ? (x121 + x186 * x361 - x186 * x366 - x186 * x367 + x196 * x360 - x197 * x359 - x20 * x277 * x357 - x202 * x364 - x35 * x365 + x354 * x383 - x356 * x384 - x368 * x391 + x38 - x397 + x398 + x399 + x40 * x80 - x40 * x83 + x400) : (x19 + x385)));
    C_output[3] = x1 * (x135 * x404 + 0.33333333333333298 * x139 - x148 * x169 + x148 * x298 * x331 - x155 * x344 + x155 * x347 - x157 * x407 + x165 * x298 * x387 + x179 + 1.3333333333333299 * x253 * x308 + 2.0 * x253 * x310 + x254 * x402 + x258 * x68 + x264 * x94 + x273 * x403 + x282 * x403 + x285 * x406 + x296 * x64 + x301 * x312 - x303 * x68 - x317 * x324 + x329 * x408 + x332 * x408 + x349 * x407 + 0.66666666666666696 * x382 + x388 - 2.0 * x389 - x390 + 0.5 * ((x127) ? (-x106 * x404 + x123 * x132 * x295 * x40 + x126 - x36 * x382 + x369 * x46 + x370 * x49 + x371 * x69 - x372 * x401 - x372 * x402 + x373 * x75 + x375 * x49 + x376 * x403 + x378 * x406 + x397 - x398 - x399 + 2 * x400 + x405 * x98) : (x130 - x405))) + x181 * x381;

    return C_output;
}

std::vector<double> calc_grav(std::vector<double> state, double h, double m, double g)
{
    std::vector<double> grav_output{0.0, 0.0};
    double x0[2];
    x0[0] = state[0];
    x0[1] = state[1];
    const double x1 = x0[0];
    const double x2 = g * h * m;
    const double x3 = x1 * x2;
    const double x4 = x0[1];
    const double x5 = pow(x1, 2) + pow(x4, 2);
    const double x6 = sqrt(x5);
    const double x7 = sin(x6) / pow(x5, 3.0 / 2.0);
    const double x8 = 2 * (1 - cos(x6)) / pow(x5, 2);
    const double x9 = x2 * x4;

    grav_output[0] = x3 * x7 - x3 * x8;
    grav_output[1] = x7 * x9 - x8 * x9;

    return grav_output;
}

std::vector<double> fkEnd(std::vector<double> state, double h, double l)
{
    std::vector<double> fk_End_output{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
    double x0[2];
    x0[0] = state[0];
    x0[1] = state[1];
    const double x1 = x0[1];
    const double x2 = pow(l, 2);
    const double x3 = x2 / pow(h, 2);
    const double x4 = pow(x1, 2) * x3;
    const double x5 = x0[0];
    const double x6 = x3 * pow(x5, 2);
    const double x7 = x4 + x6;
    const double x8 = 1.0 / x7;
    const double x9 = sqrt(x7);
    const double x10 = cos(x9);
    const double x11 = x8 * (x10 - 1);
    const double x12 = x8 * (1 - x10);
    const double x13 = x1 * x12 * x3 * x5;
    const double x14 = l * sin(x9) / x9;
    const double x15 = 1.0 / h;
    const double x16 = x1 * x15;
    const double x17 = x14 * x16;
    const double x18 = x15 * x5;
    const double x19 = x14 * x18;

    fk_End_output[0] = x11 * x4 + 1;
    fk_End_output[1] = x13;
    fk_End_output[2] = x17;
    fk_End_output[3] = x12 * x16 * x2;
    fk_End_output[4] = x13;
    fk_End_output[5] = x11 * x6 + 1;
    fk_End_output[6] = -x19;
    fk_End_output[7] = x11 * x18 * x2;
    fk_End_output[8] = -x17;
    fk_End_output[9] = x19;
    fk_End_output[10] = x10;
    fk_End_output[11] = x14;
    fk_End_output[12] = 0;
    fk_End_output[13] = 0;
    fk_End_output[14] = 0;
    fk_End_output[15] = 1;

    return fk_End_output;
}

py::array calc_regressor(std::vector<double> state, std::vector<double> stateDot, std::vector<double> qdr, std::vector<double> qddr, double h, double m, double r, double g)
{
    double regressor_output[6];
    double udotr = qdr[0];
    double vdotr = qdr[1];
    double uddotr = qddr[0];
    double vddotr = qddr[1];
    double x0[2];
    x0[0] = state[0];
    x0[1] = state[1];
    const double x1 = x0[0];
    const double x2 = pow(x1, 2);
    const double x3 = x0[1];
    const double x4 = pow(x3, 2);
    const double x5 = x2 + x4;
    const double x6 = pow(x5, -3.0 / 2.0);
    const double x7 = x1 * x6;
    const double x8 = sqrt(x5);
    const double x9 = sin(x8);
    const double x10 = g * h;
    const double x11 = x10 * x9;
    const double x12 = 2 * x1;
    const double x13 = cos(x8);
    const double x14 = x10 * (1 - x13) / pow(x5, 2);
    const double x15 = pow(x1, 4);
    const double x16 = pow(h, 3);
    const double x17 = pow(x1, 6);
    const double x18 = h * x17;
    const double x19 = pow(x3, 6);
    const double x20 = h * x19;
    const double x21 = pow(x3, 4);
    const double x22 = h * x21;
    const double x23 = x2 * x22;
    const double x24 = h * x15;
    const double x25 = x24 * x4;
    const double x26 = x16 / (3 * x18 + 3 * x20 + 9 * x23 + 9 * x25);
    const double x27 = x16 * x17;
    const double x28 = pow(r, 2);
    const double x29 = 12 * x16;
    const double x30 = x17 * x29;
    const double x31 = x19 * x29;
    const double x32 = 36 * x16;
    const double x33 = x2 * x21;
    const double x34 = x15 * x4;
    const double x35 = x28 / (x30 + x31 + x32 * x33 + x32 * x34);
    const double x36 = x2 * x4;
    const double x37 = 2 * x36;
    const double x38 = h * x37 + x22 + x24;
    const double x39 = h * x28;
    const double x40 = x39 / x38;
    const double x41 = 0.5 * x40;
    const double x42 = x4 * x41;
    const double x43 = x18 + x20 + 3 * x23 + 3 * x25;
    const double x44 = 1.0 / x43;
    const double x45 = h * x44;
    const double x46 = pow(h, 2);
    const double x47 = x2 * x8;
    const double x48 = x4 * x8;
    const double x49 = x47 + x48;
    const double x50 = x46 / x49;
    const double x51 = x13 * x50;
    const double x52 = x8 * x9;
    const double x53 = -x2 * x51 - x4 * x51 + x50 * x52;
    const double x54 = x47 * x53;
    const double x55 = 2 * x54;
    const double x56 = x16 * x35;
    const double x57 = x34 * x56;
    const double x58 = (1.0 / 2.0) * x8;
    const double x59 = (1.0 / 2.0) * x13 * x9;
    const double x60 = x58 - x59;
    const double x61 = x16 * x44;
    const double x62 = x60 * x61;
    const double x63 = 1.0 / x8;
    const double x64 = x2 * x63;
    const double x65 = 4 * x16;
    const double x66 = x17 * x65;
    const double x67 = x19 * x65;
    const double x68 = x29 * x33 + x29 * x34 + x66 + x67;
    const double x69 = 1.0 / x68;
    const double x70 = x16 * x28;
    const double x71 = x69 * x70;
    const double x72 = x60 * x71;
    const double x73 = x21 * x63;
    const double x74 = x58 + x59;
    const double x75 = x63 * x74;
    const double x76 = x4 * x63;
    const double x77 = 1.0 * x40;
    const double x78 = x77 * x9;
    const double x79 = x15 + x21 + x37;
    const double x80 = x46 / x79;
    const double x81 = x63 * x80;
    const double x82 = 2 * x9;
    const double x83 = x63 * x72;
    const double x84 = x36 * x83 + x74 * x81 - x81 * x82;
    const double x85 = x8 / h != 0;
    const double x86 = -x80;
    const double x87 = x26 * x36 + x33 * x56 + x80;
    const double x88 = x3 * x41;
    const double x89 = x1 * x88;
    const double x90 = pow(x3, 3);
    const double x91 = x1 * x90;
    const double x92 = pow(x1, 3);
    const double x93 = x3 * x92;
    const double x94 = pow(x1, 5);
    const double x95 = x3 * x94;
    const double x96 = x16 * x92;
    const double x97 = x90 * x96;
    const double x98 = x21 * x47;
    const double x99 = x15 * x48;
    const double x100 = 1.0 / (x30 * x8 + x31 * x8 + x32 * x98 + x32 * x99);
    const double x101 = x1 * x8;
    const double x102 = pow(x3, 5);
    const double x103 = x102 * x70;
    const double x104 = x101 * x103;
    const double x105 = x28 * x8;
    const double x106 = 2 * x8;
    const double x107 = x106 * x3;
    const double x108 = x45 * x53;
    const double x109 = x39 * x53;
    const double x110 = x109 * x69;
    const double x111 = x110 * x8;
    const double x112 = x29 * x98 + x29 * x99 + x66 * x8 + x67 * x8;
    const double x113 = 1.0 / x112;
    const double x114 = x109 * x113;
    const double x115 = x102 * x114;
    const double x116 = x1 * x77;
    const double x117 = x3 * x63;
    const double x118 = x117 * x9;
    const double x119 = x1 * x41;
    const double x120 = x117 * x119;
    const double x121 = x117 * x62;
    const double x122 = x63 * x90;
    const double x123 = x122 * x72;
    const double x124 = x28 * x60;
    const double x125 = x113 * x96;
    const double x126 = x124 * x125;
    const double x127 = -x1 * x107 * x108 - x1 * x115 + x100 * x104 + x100 * x105 * x97 + x111 * x91 - x111 * x93 + x114 * x95 + x26 * x91 + x26 * x93 + x35 * x97 + x56 * x95 - x89 + ((x85) ? (x1 * x121 - x1 * x123 + x116 * x118 - x120 * x74 - x126 * x3) : (x89));
    double x128[2];
    x128[0] = stateDot[0];
    x128[1] = stateDot[1];
    const double x129 = x128[1];
    const double x130 = x2 * x3;
    const double x131 = x6 * x62;
    const double x132 = -x130 * x131;
    const double x133 = (1.0 / 2.0) * x117;
    const double x134 = pow(x9, 2);
    const double x135 = x133 * x134;
    const double x136 = pow(x13, 2);
    const double x137 = x133 * x136;
    const double x138 = x133 + x135 - x137;
    const double x139 = x61 * x64;
    const double x140 = x71 * x73;
    const double x141 = pow(x43, -2);
    const double x142 = 6 * h;
    const double x143 = x24 * x3;
    const double x144 = x2 * x90;
    const double x145 = 12 * h;
    const double x146 = -x102 * x142 - 6 * x143 - x144 * x145;
    const double x147 = x141 * x146;
    const double x148 = x16 * x60;
    const double x149 = x148 * x64;
    const double x150 = x6 * x60;
    const double x151 = x150 * x71;
    const double x152 = 4 * x90;
    const double x153 = x133 - x135 + x137;
    const double x154 = x42 * x63;
    const double x155 = x6 * x90;
    const double x156 = x74 * x77;
    const double x157 = x41 * x74;
    const double x158 = x13 / x5;
    const double x159 = x158 * x77;
    const double x160 = 2.0 * x40;
    const double x161 = pow(x68, -2);
    const double x162 = 24 * x16;
    const double x163 = x102 * x162;
    const double x164 = x15 * x162;
    const double x165 = x164 * x3;
    const double x166 = 48 * x16;
    const double x167 = x161 * (-x144 * x166 - x163 - x165);
    const double x168 = x167 * x70;
    const double x169 = x60 * x73;
    const double x170 = 4 * x130;
    const double x171 = -h * x152 - h * x170;
    const double x172 = x39 / pow(x38, 2);
    const double x173 = x172 * x4;
    const double x174 = x171 * x173;
    const double x175 = 0.5 * x174;
    const double x176 = x171 * x172;
    const double x177 = 1.0 * x9;
    const double x178 = x177 * x76;
    const double x179 = x46 / pow(x79, 2);
    const double x180 = x179 * (-x152 - x170);
    const double x181 = x3 * x6;
    const double x182 = x74 * x80;
    const double x183 = 2 * x3;
    const double x184 = x158 * x80;
    const double x185 = x63 * x82;
    const double x186 = x80 * x82;
    const double x187 = x138 * x71;
    const double x188 = x36 * x63;
    const double x189 = x144 * x151;
    const double x190 = x117 * x2;
    const double x191 = 2 * x72;
    const double x192 = x188 * x60;
    const double x193 = x153 * x81 + x168 * x192 - x180 * x185 + x180 * x75 - x181 * x182 + x181 * x186 - x183 * x184 + x187 * x188 - x189 + x190 * x191;
    const double x194 = -x3 * x77;
    const double x195 = -x180;
    const double x196 = 0.5 * ((x85) ? (
                                           -x102 * x151 + x117 * x156 - x118 * x160 + x132 + x138 * x139 + x138 * x140 + x147 * x149 + x152 * x83 + x153 * x154 - x155 * x157 + x155 * x78 - x159 * x90 + x168 * x169 + x175 * x75 - x176 * x178 + x193)
                                     : (-x175 + x194 + x195));
    const double x197 = x15 * x16;
    const double x198 = 0.16666666666666699 * x141;
    const double x199 = x197 * x198;
    const double x200 = x146 * x199;
    const double x201 = 0.25 * x174;
    const double x202 = 0.66666666666666696 * x197;
    const double x203 = x28 * x3;
    const double x204 = x203 * x69;
    const double x205 = x27 * x28;
    const double x206 = 0.16666666666666699 * x167;
    const double x207 = x205 * x206;
    const double x208 = x50 * x9;
    const double x209 = x46 / pow(x49, 2);
    const double x210 = x209 * (-x107 - x122 - x190);
    const double x211 = x13 * x210;
    const double x212 = x117 * x208 + x122 * x208 + x190 * x208 - x2 * x211 + x210 * x52 - x211 * x4 - x3 * x51;
    const double x213 = 1.0 * x45;
    const double x214 = x213 * x47;
    const double x215 = x212 * x214;
    const double x216 = 0.33333333333333298 * x34;
    const double x217 = x168 * x216;
    const double x218 = 1.0 * h;
    const double x219 = x218 * x54;
    const double x220 = x147 * x219;
    const double x221 = x213 * x53;
    const double x222 = -x190 * x221;
    const double x223 = 0.5 * x180;
    const double x224 = 0.33333333333333298 * x61;
    const double x225 = 0.66666666666666696 * x71;
    const double x226 = x16 * x198;
    const double x227 = x226 * x36;
    const double x228 = x146 * x227;
    const double x229 = x33 * x70;
    const double x230 = x206 * x229;
    const double x231 = x130 * x224 + x144 * x225 + x223 + x228 + x230;
    const double x232 = x196 + x200 + x201 + x202 * x204 + x207 - x215 + x217 - x220 + x222 + x231 + x88;
    const double x233 = x128[0];
    const double x234 = x1 * x63;
    const double x235 = (1.0 / 2.0) * x234;
    const double x236 = x134 * x235;
    const double x237 = x136 * x235;
    const double x238 = x235 + x236 - x237;
    const double x239 = x44 * x96;
    const double x240 = x234 * x62;
    const double x241 = x1 * x22;
    const double x242 = x4 * x92;
    const double x243 = -x142 * x94 - x145 * x242 - 6 * x241;
    const double x244 = x141 * x243;
    const double x245 = x235 - x236 + x237;
    const double x246 = x162 * x94;
    const double x247 = x1 * x21;
    const double x248 = x162 * x247;
    const double x249 = x161 * (-x166 * x242 - x246 - x248);
    const double x250 = x249 * x70;
    const double x251 = x151 * x247;
    const double x252 = 4 * x92;
    const double x253 = x1 * x4;
    const double x254 = 4 * x253;
    const double x255 = -h * x252 - h * x254;
    const double x256 = x173 * x255;
    const double x257 = 0.5 * x256;
    const double x258 = x253 * x6;
    const double x259 = x258 * x78;
    const double x260 = x157 * x258;
    const double x261 = x159 * x253;
    const double x262 = x172 * x255;
    const double x263 = x179 * (-x252 - x254);
    const double x264 = x238 * x71;
    const double x265 = x234 * x4;
    const double x266 = -x12 * x184 - x151 * x242 - x182 * x7 - x185 * x263 + x186 * x7 + x188 * x264 + x191 * x265 + x192 * x250 + x245 * x81 + x263 * x75;
    const double x267 = -x263;
    const double x268 = 1.0 * x94;
    const double x269 = 0.16666666666666699 * x249;
    const double x270 = x63 * x92;
    const double x271 = x209 * (-x1 * x106 - x265 - x270);
    const double x272 = x13 * x271;
    const double x273 = -x1 * x51 - x2 * x272 + x208 * x234 + x208 * x265 + x208 * x270 + x271 * x52 - x272 * x4;
    const double x274 = 2.0 * x108;
    const double x275 = -x101 * x274;
    const double x276 = 0.5 * x263;
    const double x277 = 0.33333333333333298 * x71;
    const double x278 = x247 * x277;
    const double x279 = x227 * x243;
    const double x280 = x229 * x269;
    const double x281 = x224 * x253 + x276 + x278 + x279 + x280;
    const double x282 = -x116;
    const double x283 = 0.66666666666666696 * x61;
    const double x284 = x172 * x2;
    const double x285 = x255 * x284;
    const double x286 = 0.25 * x285;
    const double x287 = 0.5 * x176;
    const double x288 = x1 * x3;
    const double x289 = x287 * x288;
    const double x290 = x1 * x19;
    const double x291 = pow(x1, 8);
    const double x292 = pow(x3, 8);
    const double x293 = x19 * x2;
    const double x294 = x16 * x293;
    const double x295 = x27 * x4;
    const double x296 = x164 * x21 + x291 * x65 + x292 * x65 + 16 * x294 + 16 * x295;
    const double x297 = 1.0 / x296;
    const double x298 = x297 * x70;
    const double x299 = 0.66666666666666696 * x290 * x298;
    const double x300 = x21 * x96;
    const double x301 = x28 * x297;
    const double x302 = 0.66666666666666696 * x300 * x301;
    const double x303 = x21 * x226;
    const double x304 = x243 * x303;
    const double x305 = 0.33333333333333298 * x147;
    const double x306 = x16 * x91;
    const double x307 = x3 * x96;
    const double x308 = 0.33333333333333298 * x95;
    const double x309 = x34 * x70;
    const double x310 = x269 * x309;
    const double x311 = 0.33333333333333298 * x90;
    const double x312 = x311 * x96;
    const double x313 = x28 * x312;
    const double x314 = pow(x296, -2);
    const double x315 = pow(x1, 7);
    const double x316 = 32 * x16;
    const double x317 = 96 * x16;
    const double x318 = x4 * x94;
    const double x319 = x314 * (-x290 * x316 - 96 * x300 - x315 * x316 - x317 * x318);
    const double x320 = x292 * x70;
    const double x321 = 0.16666666666666699 * x320;
    const double x322 = x319 * x321;
    const double x323 = x113 * x70;
    const double x324 = 0.33333333333333298 * x323;
    const double x325 = x113 * x8;
    const double x326 = x21 * x270;
    const double x327 = 1.0 * x28;
    const double x328 = x327 * x48;
    const double x329 = x28 * x319;
    const double x330 = 0.33333333333333298 * x294;
    const double x331 = x329 * x330;
    const double x332 = x197 * x21;
    const double x333 = 0.16666666666666699 * x332;
    const double x334 = x329 * x333;
    const double x335 = -x221 * x265;
    const double x336 = 1.0 * x111;
    const double x337 = x22 * x53;
    const double x338 = x327 * x69;
    const double x339 = x1 * x110 * x48;
    const double x340 = x241 * x53;
    const double x341 = 2.0 * x105 * x297;
    const double x342 = x340 * x341;
    const double x343 = 1.0 * x270;
    const double x344 = x301 * x337 * x343;
    const double x345 = x297 * x63;
    const double x346 = 1.0 * x109;
    const double x347 = x345 * x346;
    const double x348 = x318 * x347;
    const double x349 = x48 * x92;
    const double x350 = 4.0 * x109 * x297;
    const double x351 = x349 * x350;
    const double x352 = x244 * x53;
    const double x353 = x218 * x48;
    const double x354 = x352 * x353;
    const double x355 = x147 * x53;
    const double x356 = 2.0 * x101;
    const double x357 = h * x3 * x356;
    const double x358 = pow(x112, -2);
    const double x359 = pow(x3, 7);
    const double x360 = x63 * x65;
    const double x361 = x102 * x2;
    const double x362 = x29 * x63;
    const double x363 = x47 * x90;
    const double x364 = x358 * (-x117 * x66 - x122 * x15 * x29 - x163 * x8 - x165 * x8 - x166 * x363 - x359 * x360 - x361 * x362);
    const double x365 = 0.33333333333333298 * x104;
    const double x366 = x346 * x8;
    const double x367 = x167 * x366;
    const double x368 = x105 * x312;
    const double x369 = 1.0 * x39 * x4 * x54;
    const double x370 = x249 * x369;
    const double x371 = x113 * x28;
    const double x372 = 5.0 * x371;
    const double x373 = x22 * x327 * x54;
    const double x374 = x319 * x373;
    const double x375 = x24 * x53;
    const double x376 = x328 * x375;
    const double x377 = x319 * x376;
    const double x378 = x1 * x102;
    const double x379 = x109 * x364;
    const double x380 = x268 * x3;
    const double x381 = x213 * x48;
    const double x382 = x273 * x381;
    const double x383 = x212 * x3;
    const double x384 = x356 * x45;
    const double x385 = 1.0 * x212;
    const double x386 = x39 * x69;
    const double x387 = x386 * x8;
    const double x388 = x385 * x387;
    const double x389 = 1.0 * x273;
    const double x390 = x389 * x47;
    const double x391 = x386 * x4;
    const double x392 = x390 * x391;
    const double x393 = x22 * x301;
    const double x394 = x390 * x393;
    const double x395 = x24 * x301;
    const double x396 = x395 * x48;
    const double x397 = x389 * x396;
    const double x398 = x113 * x39;
    const double x399 = x378 * x398;
    const double x400 = x268 * x398;
    const double x401 = x1 * x117;
    const double x402 = x177 * x401;
    const double x403 = -x131 * x253;
    const double x404 = x401 * x74;
    const double x405 = x148 * x401;
    const double x406 = x138 * x61;
    const double x407 = x1 * x122;
    const double x408 = x407 * x60;
    const double x409 = x125 * x203;
    const double x410 = x124 * x307;
    const double x411 = x238 * x61;
    const double x412 = x205 * x345;
    const double x413 = x148 * x76;
    const double x414 = x150 * x298;
    const double x415 = x298 * x63;
    const double x416 = x415 * x60;
    const double x417 = x41 * x64;
    const double x418 = x6 * x92;
    const double x419 = x34 * x415;
    const double x420 = x124 * x27;
    const double x421 = x420 * x63;
    const double x422 = 0.5 * x262;
    const double x423 = x64 * x74;
    const double x424 = x177 * x64;
    const double x425 = x309 * x60 * x63;
    const double x426 = 0.5 * ((x85) ? (x156 * x234 - x157 * x418 - x159 * x92 - x160 * x234 * x9 + x238 * x412 + x238 * x419 + x244 * x413 + x245 * x417 + x252 * x298 * x60 * x76 - x262 * x424 + x266 - x315 * x414 - x318 * x414 + x319 * x421 + x319 * x425 + x403 + x411 * x76 + 6 * x416 * x94 + x418 * x78 + x422 * x423) : (x267 + x282 - 0.5 * x285));
    const double x427 = 1.0 / (x166 * x293 + x29 * x291 + x29 * x292 + 48 * x295 + 72 * x332);
    const double x428 = x2 * x41;
    const double x429 = x28 * x427;
    const double x430 = 2 * x48;
    const double x431 = x395 * x53;
    const double x432 = -x110 * x343 * x4 + x119 + x225 * x242 + x281 + x286 + x299 + x302 + x304 + x310 + x322 + x331 + x334 + x335 - 2.0 * x339 + x342 + x344 + x348 + x351 - x354 - x370 + x374 + x377 - x382 - x392 + x394 + x397 + x426;
    const double x433 = x314 * (-x15 * x317 * x90 - x17 * x3 * x316 - x316 * x359 - x317 * x361);
    const double x434 = x301 * x90;
    const double x435 = x130 * x6;
    const double x436 = x435 * x78;
    const double x437 = x157 * x435;
    const double x438 = x130 * x159;
    const double x439 = x171 * x284;
    const double x440 = x197 * x204;
    const double x441 = -x274 * x3 * x8;
    const double x442 = x28 * x433;
    const double x443 = x385 * x47;
    const double x444 = 1.0 * x122;
    const double x445 = x143 * x53;
    const double x446 = x110 * x2 * x444;
    const double x447 = x3 * x386 * x54;
    const double x448 = x288 * x422;
    const double x449 = 0.33333333333333298 * x244;
    const double x450 = x358 * (-x166 * x349 - x234 * x67 - x246 * x8 - x248 * x8 - x29 * x326 - x315 * x360 - x318 * x362);
    const double x451 = x249 * x366;
    const double x452 = x273 * x3;
    const double x453 = x387 * x389;

    regressor_output[0] = uddotr * (x15 * x26 + x27 * x35 + x42 - x45 * x55 + 2 * x57 + x87 + ((x85) ? (x42 * x75 + x62 * x64 + x72 * x73 - x76 * x78 + x84) : (-x42 + x86))) + udotr * (x129 * x232 + x233 * (x199 * x243 + x205 * x269 - x214 * x273 + x216 * x250 - x219 * x244 - x221 * x270 + 0.66666666666666696 * x239 + 1.3333333333333299 * x242 * x71 + 0.25 * x256 + x268 * x71 + x275 + x281 + 0.5 * ((x85) ? (x139 * x238 + x140 * x238 + x149 * x244 - x150 * x239 + x154 * x245 + x169 * x250 - x178 * x262 + 2 * x240 - x251 + x257 * x75 + x259 - x260 - x261 + x266) : (-x257 + x267)))) + vddotr * x127 + vdotr * (x129 * (x114 * x268 + x125 * x328 + x167 * x313 + x168 * x308 + x19 * x234 * x324 + x234 * x337 * x338 + 0.33333333333333298 * x239 + x242 * x277 + 1.6666666666666701 * x247 * x325 * x70 + x253 * x283 + x275 - x276 + x277 * x94 - x278 - x279 - x280 + x282 - x286 - x289 - x299 - x302 - x304 + x305 * x306 + x305 * x307 - x310 - x322 + x324 * x326 - x331 - x334 + x335 - x336 * x92 + 5.0 * x339 - x340 * x372 - x342 - x344 - x348 - x351 + x354 - x355 * x357 + x364 * x365 + x364 * x368 + x367 * x91 - x367 * x93 + x370 - x374 - x377 - 1.0 * x378 * x379 + x379 * x380 + x382 - x383 * x384 + x383 * x400 - x385 * x399 + x388 * x91 - x388 * x93 + x392 - x394 - x397 - x426 + 1.0 * ((x85) ? (-x120 * x153 - x126 - x138 * x409 + x147 * x405 - x157 * x234 - x168 * x408 + x176 * x402 - x187 * x407 + x234 * x78 + x240 + x251 - x259 + x260 + x261 - 3 * x265 * x72 - x287 * x404 - x364 * x410 + x401 * x406 + x403) : (x119 + x289))) + x232 * x233) + x11 * x7 - x12 * x14;
    regressor_output[1] = uddotr * x127 + udotr * (x129 * x432 + x233 * (0.33333333333333298 * x103 * x325 + x109 * x380 * x450 - 1.0 * x115 - x117 * x338 * x375 + 0.33333333333333298 * x122 * x197 * x371 + x130 * x283 + x144 * x277 + x194 - x196 - x200 - x201 - x207 + x215 - x217 + x220 + x222 - x223 - x228 - x230 + x249 * x313 + x250 * x308 + x306 * x449 + x307 * x449 + x311 * x61 + 1.0 * x323 * x363 + x324 * x361 * x63 + x336 * x90 - x346 * x378 * x450 - x352 * x357 + x365 * x450 + x368 * x450 + x372 * x445 - x384 * x452 - x389 * x399 + x400 * x452 + 1.0 * x440 + x441 + x446 - 3.0 * x447 - x448 + x451 * x91 - x451 * x93 + x453 * x91 - x453 * x93 + 1.0 * ((x85) ? (-x117 * x157 + x117 * x78 - x120 * x245 + x121 - x123 - 3 * x130 * x323 * x60 + x132 + x189 - x238 * x409 + x244 * x405 - x250 * x408 + x262 * x402 - x264 * x407 + x401 * x411 - x404 * x422 - x410 * x450 - x436 + x437 + x438) : (x448 + x88)))) + vddotr * (-x108 * x430 + x21 * x26 + 2 * x294 * x429 + x320 * x427 + x332 * x429 - x391 * x55 + x393 * x55 + x428 + x430 * x431 + x57 + x87 + ((x85) ? (x157 * x64 + x34 * x416 + x345 * x420 + x62 * x76 - x64 * x78 + x84) : (-x428 + x86))) + vdotr * (x129 * (-x122 * x221 + x146 * x303 - x167 * x369 + x202 * x434 + x206 * x309 - x212 * x381 + x231 + x283 * x90 + 1.3333333333333299 * x298 * x359 + 2.0 * x298 * x361 + x321 * x433 + x330 * x442 + x333 * x442 + x341 * x445 + x347 * x361 + x350 * x363 - x353 * x355 + x373 * x433 + x376 * x433 + x385 * x396 - x391 * x443 + x393 * x443 + x431 * x444 + 0.25 * x439 + 0.33333333333333298 * x440 + x441 - x446 - 2.0 * x447 + 0.5 * ((x85) ? (2 * x117 * x124 * x197 * x297 + 2 * x121 - x131 * x90 + x138 * x412 + x138 * x419 + x147 * x413 - x150 * x197 * x434 + x153 * x417 - x176 * x424 - x181 * x297 * x420 + x193 + x287 * x423 + x406 * x76 + x421 * x433 + x425 * x433 + x436 - x437 - x438) : (x195 - 0.5 * x439))) + x233 * x432) + x11 * x181 - x14 * x183;
    regressor_output[2] = 0;
    regressor_output[3] = 0;
    regressor_output[4] = 0;
    regressor_output[5] = 0;

    return py::array(6, regressor_output);
}

PYBIND11_MODULE(bellows_grub_dynamics, m)
{
    m.def("calc_state_derivs", &calc_state_derivs, "inputs: &X, &U");
    m.def("calc_M", &calc_M, "inputs: state, h, m, r ");
    m.def("calc_C", &calc_C, "inputs: state, stateDot, h, m, r");
    m.def("calc_grav", &calc_grav, "inputs: state, h, m, g");
    m.def("fkEnd", &fkEnd, "inputs: state, h, l");
    m.def("calc_regressor", &calc_regressor, "inputs: q, qd, qdr, qddr, h, m, r, g");
}
